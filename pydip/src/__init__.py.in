# PyDIP 3.0, Python bindings for DIPlib 3.0
#
# (c)2017-2020, Flagship Biosciences, Inc., written by Cris Luengo.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This module is PyDIP, the Python interface to DIPlib.

See the User Manual online: https://diplib.github.io/diplib-docs/pydip_user_manual.html
"""

import os
import contextlib
import importlib.util

def find_diplib_dll_directory():
    if @py_init_use_relative_location@:  # condition configured by installation script
        return os.path.dirname(os.path.abspath(__file__)) + "/@diplib_dir@"
    else:
        return "@CMAKE_INSTALL_PREFIX@/@LIBRARY_DESTINATION@"

@contextlib.contextmanager
def add_diplib_dll_directory():
    dll_dirs = []
    if os.name == 'nt':
        if 'add_dll_directory' in dir(os):
            dll_dirs.append(find_diplib_dll_directory())
        else:
            os.environ["PATH"] += os.pathsep + find_diplib_dll_directory()
    try:
        yield None
    finally:
        for dll_dir in dll_dirs:
            dll_dir.close()

with add_diplib_dll_directory():
    # Here we import classes and functions from the binary and the python-code modules
    # into the same namespace.
    from PyDIP.PyDIP_bin import *
    from PyDIP.PyDIP_py import *

    # Here we import PyDIPviewer if it exists
    hasDIPviewer = False
    if importlib.util.find_spec('PyDIP.PyDIPviewer') is not None:
        import PyDIP.PyDIPviewer as viewer
        hasDIPviewer = True

    # Here we import PyDIPjavaio if it exists
    hasDIPjavaio = False
    if importlib.util.find_spec('PyDIP.PyDIPjavaio') is not None:
        import PyDIP.PyDIPjavaio as javaio
        ImageRead = javaio.ImageRead
        hasDIPjavaio = True
